single_chars_vector <- function(s){   # Creating a function
unlist(strsplit(s, split = ""))     # applying unlist() to get a vector of single characters
}
single_chars_vector("gwen")
people
sapply(people, single_chars_vector) # The output element are vectors, i.e. complex data structures.
sapply(people, single_chars_vector, simplify = TRUE)
unlist(strsplit("gwen", split = ""))
unlist(strsplit(s, split = ""))[1]
unlist(strsplit("gwen", split = ""))[1]
unlist(strsplit("gwen", split = ""))[2]
first_two_letters <- function(s){            # Writing a function that extracts the first 2 letters
letters <- unlist(strsplit(s, split = ""))
first <- letters[1]
second <- letters[2]
c(first = first,second = second)
}
first_two_letters("gwen")
sapply(people, first_two_letters, simplify = TRUE)
people
names(people) <- c("person1", "person2", "person3") # assigning labels to its elements
print(people)
sapply(people, first_two_letters, simplify = TRUE)
2+3
+(2,3)
'+'(2,3)
unlist(strsplit("gwen", split = ""))[1] # demonstrating how to extract the first letter from a string
# The function + takes in 2 values as arguments
1+1 # 2
# As all base R functions, it is vectorized
v1 <- 1:3
v2 <- 1:3
v1
v2
'+'(v1,v2) # 2 4 6
mapply('+', v1, v2) # 2 4 6
# It also works for lists
l1 <- list(1,2,3)
l2 <- list(1,2,3)
l1
l2
mapply('+', l1, l2) # 2 4 6
1+2+3
'+'(1,2,3)
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Kafi", "Gipfeli", "Joghurt")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Kafi", "Gipfeli", "Joghurt")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Basler Mehlsuppe", "Z체ri Gschn채tzlets ")
# Create a list `meals` that has contains your breakfast and lunch
meals_list <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals_list$dinner <- c("Fondue", "White Wine", "Espresso", "Vanille Glace")
meals_list$dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
my_dinner <- meals_list$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals_list[[5]] <- meals_list[["lunch"]]
meals_list
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals_list <- meals_list[1:2]
early_meals_list
# Round the number pi to the nearest 0.1 (one decimal place) using the function round().
round(pi, 1)
runif(10, 1, 100)
# Create a *list* of 10 random numbers.
# Hint: Use the runif() function to create a vector of random numbers. Then use as.list() to convert that to a list
rnums <- as.list(runif(10, 1, 100))
# Use lapply() to apply the round() function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(rnums, round, 1)
# Create the list my_list <- list(observationA = 16:8, observationB = exp(c(20:19, 6:12))).
my_list <- list(observationA = 16:8, observationB = exp(c(20:19, 6:12)))
my_list
# Calculate the respective means of observationA and observationB.
# First use lapply, then use sapply().
# What is the difference? Use class() to check the object classes.
lapply(my_list, mean) # result is a list
sapply(my_list, mean) # result is a vector. Note that the verctor elements are named. (Remember that you can retrieve the names attribute using names(): names(sapply(my_list, mean)) )
class(lapply(my_list, mean)) # list
class(sapply(my_list, mean)) # numeric (thus, it's a vector: the most basic object in R)
# Calculate the respective quartiles of observationA and observationB . First use lapply, then use sapply().
# What class are the respective output objects?
#   Hint: you can get the quantiles using the function quantile().
#   Remark: While mean returns a single value, quantile() returns a vector.
lapply(my_list, quantile)
sapply(my_list, quantile)
# Calculate the respective quartiles of observationA and observationB . First use lapply, then use sapply().
# What class are the respective output objects?
#   Hint: you can get the quartiles using the function quantile().
#   Remark: While mean returns a single value, quantile() returns a vector.
lapply(my_list, quantile)
sapply(my_list, quantile)
# Apply the exponential function exp() of to each element of observationB.
log(my_list[[2]])
# Create the function my_transformation <- function(x) { log10(x) - 1 }.
# Apply my_transformation() to each element of observationB.
# Hint: Notice that my_fun() is not vectorized!
my_transformation <- function(x) { log(x) + 1 }
sapply(my_list[[2]], my_transformation) # Note: Since my_transformation() is not vectorized, applying it directly as my_transformation(my_list[[2]]) throws an error.
my_transformation(my_list[[2]])
# Create a list of meals that you ate yesterday (breakfast, lunch, dinner).
# Remark: You can reuse your list from task 1, exercise 3.1.
yesterdays_meals_list <- list(breakfast = c("Kafi", "Gipfeli", "Joghurt"),
lunch = c("Basler Mehlsuppe", "Z체ri Gschn채tzlets "),
dinner = c("Fondue", "White Wine", "Espresso", "Vanille Glace"))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(yesterdays_meals_list, length)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- tolower("Time flies like an arrow. Fruit flies like bananas.")
sentence
# Use the `strsplit()` function to split the sentence into a vector of letters.
#   Hint: Split on `""` to split every character. (You don't need to exclude punctuation marks.)
#   This will return a list with 1 element (which is the vector of letters).
letters_list <- strsplit(sentence, "")
# Extract the vector of letters from the resulting list and store it in a variable called letters_vector.
letters_vector <- letters_list[[1]]
letters_list
letters_vector
# Use the `unique()` function to get a vector of unique letters. Store it in the variable letters_unique.
letters_unique <- unique(letters_vector)
letters_unique
# Count how many different letters occur in your sentence by counting the number of elements in letters_unique.
#   Hint: Use the function length()
#   (Notice that this includes punctuation marks!)
length(letters_unique)
# Count how many different letters occur in your sentence by counting the number of elements in letters_unique.
#   Hint: Use the function length()
#   (Notice that this includes punctuation marks!)
length(letters_unique)
# A vector of names
name <- c("Ada", "Bob", "Chris", "Diya", "Emma") # A vector of heights
height <- c(64, 74, 69, 69, 71) # A vector of weights
weight <- c(135, 156, 139, 144, 152)
# Combine the vectors into a data frame
# Note the names of the variables become the names of the columns!
people <- data.frame(name, height, weight, stringsAsFactors = FALSE)
people
rownames(people)
rownames(people) <- c("p1", "p2","p3","p4", "p5")
people
colnames(people)
people$name
people[[1]]
people[1]
people$height*2
people$doubleheight <- people$height*2
people
v=1:5
v
lv <- v<3
lv
lv <- v>3
lv
v[lv]
v[v>3]
people
people$height
people$height[people$height>70]
people[,people$height>70]
people[people$height>70,]
sample_rows <- sample(1:nrow(LCdata), nrow(LCdata), replace = TRUE)
library(readr)
LCdata <- read_csv("Documents/_FHNW/_AUSBILDUNG/Unterricht/24FS (Feb24)/TSAR/_04_Project/02_P2/LCdata.csv")
View(LCdata)
sample_rows <- sample(1:nrow(LCdata), nrow(LCdata), replace = TRUE)
sample_rows %>%  distinct()
library(tidyverse)
sample_rows %>%  distinct()
sample_rows
as.data.frame(sample_rows) %>%  distinct()
as.data.frame(sample_rows) %>%  distinct() %>% nrow
as.data.frame(sample_rows) %>%  distinct() %>% nrow()
LCdata_sample <- LCdata[sample_rows, ]
LCdata_resample <- LCdata[sample_rows, ]
rm(LCdata_sample)
resample_rows <- sample(1:nrow(LCdata), nrow(LCdata), replace = TRUE)
rm(sample_rows)
set.seed(1)
resample_rows <- sample(1:nrow(LCdata), nrow(LCdata), replace = TRUE)
resample_rows %>% as.data.frame() %>% distinct() %>% nrow()
resample_rows %>% as.data.frame() %>% distinct() %>% nrow() %>% '-'nrow(LCdata) # check if some rows have been replaced
resample_rows %>% as.data.frame() %>% distinct() %>% nrow() %>% '-' nrow(LCdata) # check if some rows have been replaced
'-'(2,3)
resample_rows %>% as.data.frame() %>% distinct() %>% nrow() %>% '-'(nrow(LCdata)) # check if some rows have been replaced
resample_rows %>% as.data.frame() %>% distinct() %>% nrow() %>% '-'(nrow(LCdata)) <0 # check if some rows have been replaced
resample_rows %>% as.data.frame() %>% distinct() %>% nrow()  # check if some rows have been replaced
LCdata_resample <- LCdata[resample_rows, ] # resample data frame so that some rows are duplicated now.
LCdata_resample %>%  distinct()
chattr_app()
library(chattr)
chattr_app()
chattr_app()
library(readr)
LCdata <- read_csv("Documents/_FHNW/_AUSBILDUNG/Unterricht/24FS (Feb24)/TSAR/_04_Project/02_P2/LCdata.csv")
View(LCdata)
boxplot.stats(LCdata$loan_amnt)
chattr_app()
quantile(LCdata$loan_amnt)
quantile(LCdata$loan_amnt)[1]
boxplot.stats(LCdata$loan_amnt)
boxplot.stats(LCdata$loan_amnt)[5]
boxplot.stats(LCdata$loan_amnt)$stats[5]
test <- c(NA, 1,2,3,4)
test
boxplot.stats(test)
# Add missing values to numerical columns
LCdata_df_numeric_missing <- data_df %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.1, NA, .))
# Add missing values to numerical columns
LCdata_df_numeric_missing <- LCdata %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.1, NA, .))
is.na(LCdata)
sum(is.na(LCdata))
sum(is.na(LCdata_df_numeric_missing))
# Add missing values to numerical columns
LCdata_numeric_missing <- LCdata %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.1, NA, .))
# Add special values to numerical columns
LCdata_numeric_special <- LCdata_numeric_missing %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.05, Inf, .)) %>%  # add Inf
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.05, NaN, .))  # add NaN
# Add outliers to numerical columns
# boxplot.stats(.)$stats[5] finds the upper whisker of the boxplot of column .
LCdata_df_numeric_outliers <- LCdata_numeric_special %>%
mutate_if(is.numeric, ~ifelse(. > 0.9 * boxplot.stats(.)$stats[5], . * 1.5 * boxplot.stats(.)$stats[5], .))
boxplot.stats(LCdata$loan_amnt)$out
# Check if it worked:
sum(is.na(LCdata))
sum(is.na(LCdata_numeric_missing)) # 59566
LCdata <- read_csv("LCdata.csv")
setwd("~/Documents/_FHNW/_AUSBILDUNG/Unterricht/24FS (Feb24)/TSAR/_04_Project/02_P2")
LCdata <- read_csv("LCdata.csv")
LCdata <- read_csv("LCdata.csv")
# Add missing values to numerical columns
LCdata_numeric_missing <- LCdata %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.1, NA, .))
# Check if it worked:
sum(is.na(LCdata)) # 59566
sum(is.na(LCdata_numeric_missing)) # 59566
# Check if it worked
sum(is.special(LCdata))
# Check if it worked
sum(is.finite(LCdata))
# Check if it worked
sapply(LCdata, is.finite())
# Check if it worked
lapply(LCdata, is.finite())
# Check if it worked
lapply(LCdata, is.finite
)
# Check if it worked
LCdata %>% lapply(is.finite)
# Check if it worked
LCdata %>% lapply(is.finite) %>% sum()
# Check if it worked
LCdata %>% lapply(is.finite) %>% class()
# Check if it worked
LCdata %>% sapply(is.finite)
# Check if it worked
LCdata %>% sapply(is.finite) %>% class
# Check if it worked
LCdata %>% sapply(is.finite) %>% sum()
# Check if it worked
LCdata %>% sapply(!is.finite) %>% sum()
LCdata %>% sapply(is.finite)
is.finite(c(1, Inf, NaN, NA))
!is.finite(c(1, Inf, NaN, NA))
# Check if it worked
LCdata %>% sapply(!is.finite) %>% sum()
# Check if it worked
LCdata %>% sapply(is.finite) %>% '!' %>%  sum()
# Check if it worked
LCdata %>% sapply(is.finite) %>% '!'() %>%  sum()
is.finite(LCdata$delinq)
LCdata %>% sapply(is.finite)
is.finite(LCdata$mths_since_last_delinq)
is.finite(LCdata$mths_since_last_delinq) %>%  sum()
is.finite(LCdata$mths_since_last_delinq) %>%  which()
head(LCdata$mths_since_last_delinq)
is.NAN(LCdata$mths_since_last_delinq) %>% which()
is.nan(LCdata$mths_since_last_delinq) %>% which()
is.nan(LCdata$mths_since_last_delinq) %>% which()
# Check if it worked
LCdata %>% sapply(is.nan) %>% '!'() %>%  sum() # 414518
is.nan(LCdata$mths_since_last_delinq) %>% which()
LCdata %>% sapply(is.nan)
# Check if it worked
LCdata %>% sapply(is.nan) %>% '!'() %>%  sum() # 414518
LCdata %>% sapply(is.nan)
# Check if it worked
LCdata %>% sapply(is.nan) %>%  sum() # 1'686'022
LCdata %>% sapply(is.nan) %>% '!'()
# Check if it worked
LCdata %>% sapply(is.nan) %>% '!'() %>%  sum() # 1'686'022
# Check if it worked
LCdata %>% sapply(is.nan) %>% sum() # 1'686'022
# Check if it worked
LCdata %>% sapply(is.na) %>% sum() # 1'686'022
LCdata %>% sapply(is.infinite) %>% sum() # 0
LCdata %>% sapply(is.finite) %>% sum() # 0
1271504+59566
LCdata %>% sapply(is.finite) %>% '!'() %>% sum() # 0
test
test <- c(NA, inf, 3,2)
test <- c(NA, Inf, 3,2)
test
chattr_app()
missing = across(,sum(is.na(.))
LCdata %>% summarise(
chattr_app()
summarise(LCdata, missing = across(everything(),~sum(is.na(.)))
)is.nan(LCdata$mths_since_last_delinq) %>% which()
summarise(LCdata, missing = across(everything(),~sum(is.na(.))))
summarise(LCdata_numeric_special, missing = across(everything(),~sum(is.na(.))))
# Add missing values to numerical columns
LCdata_numeric_missing <- LCdata %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.1, NA, .))
# Add special values to numerical columns
LCdata_numeric_special <- LCdata_numeric_missing %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.05, Inf, .)) %>%  # add Inf
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.05, NaN, .))  # add NaN
summarise(LCdata_numeric_special, missing = across(everything(),~sum(is.na(.))))
summarise(LCdata, missing = across(everything(),~sum(is.na(.))))
summarise(LCdata,
missing = across(everything(),~sum(is.na(.))),
not_number = across(everything(),~sum(is.nan(.))),
)
summarise(LCdata,
missing = across(everything(),~sum(is.na(.))),
not_number = across(everything(),~sum(is.nan(.)))
)
summarise(LCdata,
missing = across(everything(), ~sum(is.na(.))),
not_number = across(everything(), ~sum(is.infinite(.)))
)
summarise(LCdata_numeric_special, missing = across(everything(),~sum(is.na(.))))
not_number = across(everything(), ~sum(sapply(.,is.nan(.)))
not_number = across(everything(), ~sum(sapply(.,is.nan(.))))
summarise(LCdata,
missing = across(everything(), ~sum(is.na(.))),
not_number = across(everything(), ~sum(sapply(.,is.nan(.)))))
summarise(LCdata,
missing = across(everything(), ~sum(is.na(.))))
summarise(LCdata_numeric_special,
missing = across(everything(),~sum(is.na(.))))
summarise(LCdata_numeric_special,
missing = across(everything(),~sum(is.na(.)))) %>%  sum()
# Add missing values to numerical columns
LCdata_numeric_missing <- LCdata %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.1, NA, .))
LCdata_numeric_missing
# Add special values to numerical columns
LCdata_numeric_special <- LCdata_numeric_missing %>%
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.05, Inf, .)) %>%  # add Inf
mutate_if(is.numeric, ~ifelse(runif(n()) < 0.05, NaN, .))  # add NaN
LCdata_numeric_special
is.nan(LCdata$mths_since_last_delinq) %>% which()
# Add outliers to numerical columns
# boxplot.stats(.)$stats[5] finds the upper whisker of the boxplot of column .
LCdata_df_numeric_outliers <- LCdata_numeric_special %>%
mutate_if(is.numeric, ~ifelse(. > 0.9 * boxplot.stats(.)$stats[5], . * 1.5 * boxplot.stats(.)$stats[5], .))
boxplot.stats(LCdata_df_numeric_outliers$loan_amnt)$out
# Add special values to character columns
data_df_character_special <- LCdata_df_numeric_outliers %>%
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "", .)) %>%  # add empty string
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "--", .)) %>%  # add "--"
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "n/a", .))  # add "n/a"
data_df_character_special
data_df_character_special$home_ownership
str(LCdata)
sum(is.na(LCdata_df_numeric_outliers$home_ownership))
LCdata_df_numeric_outliers$home_ownership)
LCdata_df_numeric_outliers$home_ownership
LCdata_df_numeric_outliers$home_ownership == ""
sum(LCdata_df_numeric_outliers$home_ownership == "")
# Add outliers to numerical columns
# boxplot.stats(.)$stats[5] finds the upper whisker of the boxplot of column .
LCdata_numeric_outliers <- LCdata_numeric_special %>%
mutate_if(is.numeric, ~ifelse(. > 0.9 * boxplot.stats(.)$stats[5], . * 1.5 * boxplot.stats(.)$stats[5], .))
# Add special values to character columns
data_df_character_special <- LCdata_df_numeric_outliers %>%
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "", .)) %>%  # add empty string
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "--", .)) %>%  # add "--"
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "n/a", .))  # add "n/a"
# Add special values to character columns
data_df_character_special <- LCdata_df_numeric_outliers %>%
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "", .)) %>%  # add empty string
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "--", .)) %>%  # add "--"
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "n/a", .))  # add "n/a"
# Add special values to character columns
data_df_character_special <- LCdata_numeric_outliers %>%
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "", .)) %>%  # add empty string
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "--", .)) %>%  # add "--"
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "n/a", .))  # add "n/a"
# Add special values to character columns
data_character_special <- LCdata_numeric_outliers %>%
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "", .)) %>%  # add empty string
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "--", .)) %>%  # add "--"
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "n/a", .))  # add "n/a"
# Add special values to character columns
LCdata_character_special <- LCdata_numeric_outliers %>%
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "", .)) %>%  # add empty string
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "--", .)) %>%  # add "--"
mutate_if(is.character, ~ifelse(runif(n()) < 0.05, "n/a", .))  # add "n/a"
sum(is.na(LCdata_character_special))
LCdata_character_special$home_ownership
setwd("~/Documents/GitHub/TSAR/Part1-4_dplyr_and_tydr")
library(pscl)
library(dplyr)
View(presidentialElections)
# Add an `other_parties_vote` column that is the percentage of votes for other parties
# Also add an `abs_vote_difference` column of the absolute difference between percentages.
#   Note you can use columns as you create them!
presidentialElections <- mutate(presidentialElections,
other_parties_vote = 100 - demVote, # other parties is 100% - Democrat %
abs_vote_difference = abs(demVote - other_parties_vote)
)
print(presidentialElections)
# summarize() generates a new data frame with new column names and only 1 row.
average_votes <- summarize(presidentialElections,
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
print(average_votes)
pull(average_votes, mean_dem_vote)
#   Writing a function that returns the value in a vector furthest from 50
furthest_from_50 <- function(vec) {
adjusted_values <- vec - 50 # Subtract 50 from each value
vec[abs(adjusted_values) == max(abs(adjusted_values))]  # Return the element with the largest absolute difference from 50
}
# Generating a column `biggest_landslide` that stores the value furthest from 50%
ls <- summarize(presidentialElections,
biggest_landslide = furthest_from_50(demVote)
)
# At the least close election, democrats won with 98.6% of the votes:
print(ls)
# To access the value itself, we must use the function pull()
pull(ls) # returns a vector
# To find out where and when this happened, we can use filter()
filter(presidentialElections,
demVote == pull(ls)
)
x <- 1:4 # define a vector
x
# function with 1 argument
log(x) # normal use of log()
x %>% log()
log(x, base = 5)
rep(log(x, base = 5), 3)
presidentialElections
presidentialElections %>%
filter(year == 2008)
presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote))
presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote)) %>%
select(state)
# Group observations by state
grouped <- group_by(presidentialElections, state)
print(grouped)
presidentialElections
print(grouped)
as.data.frame(grouped)
head(as.data.frame(grouped))
tail(as.data.frame(grouped))
grouped
# Compute the average percentages across the years
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
state_voting_summary
test <- c(2,NA,3,4,5)
test
mean(test)
mean(test, na.rm = T)
library(tidyr)
library(data.table)
concerts <- fread("concert_tickets.csv")
band_data_wide <- concerts
band_data_long <- band_data_wide %>% # data frame to gather from
pivot_longer(
cols = -city, # specify the columns where you get the data from that you want to reshape
names_to = "band", # from these columns, the column names go to a new column 'band'
values_to = "price" # from these columns, the column values go to a new column 'price'
)
band_data_long
band_data_wide1 <- band_data_long %>%
pivot_wider(
names_from = band,
values_from = price
)
band_data_wide1
band_data_wide2 <- band_data_long %>%
pivot_wider(
names_from = city,
values_from = price
)
band_data_wide2
R.version.string
