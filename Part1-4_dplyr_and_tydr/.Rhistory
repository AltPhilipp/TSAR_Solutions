print(ls) # At the least close election, democrats won with 98.6% of the votes.
# To find out where and when this happened, we can use filter()
filter(presidentialElections,
demVote == pull(ls)
)
library(dplyr) # load the pipe via dplyr
x <- 1:4 # define a vector
# function with 1 argument
log(x)
x %>% log()
# daisychain log() and exp()
exp(log(x))
x %>% log %>% exp
# function with 2 parameters
log(x, base = 5)
# daisychain functions with 2 arguments
rep(log(x, base = 5), 3) # normal
x %>% log(base = 5) %>% rep(3)
# using anaonymous functions
x^2
x %>% (function(x) x^2)
install.packages("nycflights13")
library(nycflights13)
flights
flights %>%
filter(dest == "IAH") %>%
group_by(year, month, day) %>%
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote)) %>%
select(state)
### The real power of the pipe arises when you start to combine multiple dplyr verbs.
#   This example finds the state with the highest 2008 `demVote` percentage
presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote)) %>%
select(state)
# Group observations by state
grouped <- group_by(presidentialElections, state)
print(grouped)
# Compute summary statistics by state: average percentages across the years
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote) )
state_voting_summary
# Group observations by state
grouped <- group_by(presidentialElections, state)
print(grouped)
# Compute summary statistics by state: average percentages across the years
presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote) )
# Compute summary statistics by state: average percentages across the years
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
print(state_voting_summary)
# You can extract values from the resulting tibble using dollar sign or bracket notation.
state_voting_summary$mean_dem_vote
# You can extract values from the resulting tibble using dollar sign or bracket notation.
state_voting_summary[1:10,c("state", "mean_dem_vote")]
# You can extract values from the tibble using dollar sign or bracket notation.
state_voting_summary[1:10,c("state", "mean_dem_vote")]
# You can extract values from the tibble using dollar sign or bracket notation.
state_voting_summary$state
# You can convert a tibble back into a normal data frame using as.data.frame():
as.data.frame(state_voting_summary)
# You can convert a tibble back into a normal data frame using as.data.frame():
state_voting_summary_df <- as.data.frame(state_voting_summary)
print(state_voting_summary_df)
is.data.frame(state_voting_summary_df)
donors <- data.frame(
donor_name = c("Alice Walton", "Jacqueline Mars", "Maria Franca Fissolo", "Susanne Klatten", "Laurene Powell Jobs", "FranciÃ­ise Bettencourt Meyers"),
email = c("alice.walton@gmail.com", "jacqueline.mars@gmail.com", "maria.franca.fissolo@gmail.com", "susanne.klatten@gmail.com", "laurene.powell.jobs", "francoise.bettencourt.meyers@gmail.com")
)
donors
library(data.table)
fwrite(donor, file = "donors.csv")
setwd("~/Documents/GitHub/TSAR/Part1-4_dplyr_and_tydr")
fwrite(donors, file = "donors.csv")
donations <- data.frame(
donor_name = c("Maria Franca Fissolo", "Yang Huiyan", "Maria Franca Fissolo",  "Alice Walton", "Susanne Klatten", "Yang Huiyan"),
amount = c(100, 50, 75, 25, 100, 150),
date = c("2018-02-15", "2018-02-15", "2018-02-15", "2018-02-16", "2018-02-17", "2018-02-18")
)
donations
fwrite(donations, file = "donations.csv")
combined_data <- left_join(donations, donors, by = c("donor_name" = "name"))
combined_data <- left_join(donations, donors, by = "donor_name")
combined_data
combined_data_right <- right_join(donations, donors, by = "donor_name")
combined_data_right
combined_data_inner <- inner_join(donations, donors, by = "donor_name")
combined_data_inner
combined_data_outer <- outer_join(donations, donors, by = "donor_name")
combined_data_outer <- outer_join(donations, donors, by = "donor_name")
combined_data_full <- full_join(donations, donors, by = "donor_name")
combined_data_full
rm(donations)
rm(donors)
fread("donors.csv")
fread("donations.csv")
donors <- fread("donors.csv")
donations <- fread("donations.csv")
is.data.frame(donors)
library(pscl)
library(dplyr)
View(presidentialElections)
# selecting two columns with select() from dplyr
votes <- select(presidentialElections, year, demVote)
# achieve the same with base R
votes <- presidentialElections[c("year", "demVote")]    # using single brackets
votes <- presidentialElections[,c("year", "demVote")]   # using single brackets with comma
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
makes
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
distinct(makes)
library(dplyr)
distinct(makes)
makes
fueleconomy
distinct(vehicles, makes)
distinct(vehicles, make)
unique(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
length(distinct(vehicles, make))
dim(distinct(vehicles, make))
unique(makes)
distinct(vehicles, make)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes) # returns
distinct(vehicles, make) # returns a tibble
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == 1997, ]
cars_1997
nrow(distinct(vehicles, make))
cars_1997 <- vehicles %>%
filter(year == 1997)
cars_1997
order(cars_1997$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997 <- cars_1997[order(cars_1997$hwy), ]
cars_1997 <- vehicles %>%  # with dplyr
filter(year == 1997)
cars_1997
cars_1997_by_hwy <- cars_1997 %>%
arrange(hwy)
cars_1997_by_hwy
cars_1997_by_hwy
cars_1997_byhwy <- cars_1997 %>%  # equivalently, with dplyr and piping
arrange(hwy)
cars_1997_byhwy
cars_1997_byhwy <- mutate(cars_1997_byhwy, average = (hwy + cty) / 2)
cars_1997_byhwy
cars_1997 <- vehicles %>%  # equivalently, with dplyr and piping
filter(year == 1997)
cars_1997
cars_1997_byhwy <- cars_1997 %>%  # equivalently, with dplyr and piping
arrange(hwy)
cars_1997_byhwy
View(cars_1997_byhwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997_byhwy_av <- cars_1997_byhwy
cars_1997_byhwy_av$average <- (cars_1997_byhwy_av$hwy + cars_1997_byhwy_av$cty) / 2  # with base R
cars_1997_byhwy_av
cars_1997_byhwy <- cars_1997 %>%  # equivalently, with dplyr and piping
arrange(hwy)
cars_1997_byhwy
cars_1997_byhwy_av <- mutate(cars_1997_byhwy, average = (hwy + cty) / 2) # with dplyr
cars_1997_byhwy_av
cars_1997_byhwy_av
rem(cars_1997_byhwy_av)
rm(cars_1997_byhwy_av)
cars_1997_byhwy_av
# With dplyr and piping:
cars_1997_byhwy_av <- cars_1997_byhwy %>%
mutate(average = (hwy + cty) / 2)
cars_1997_byhwy_av
# With base R:
two_wheel_20_mpg <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
two_wheel_20_mpg
rm(two_wheel_20_mpg)
# With dplyr:
two_wheel_20_mpg <- filter(vehicles,
drive == "2-Wheel Drive",
vehicles$cty > 20
)
two_wheel_20_mpg
rm(two_wheel_20_mpg)
# With dplyr:
two_wheel_20_mpg <- filter(vehicles,
drive == "2-Wheel Drive",
cty > 20
)
two_wheel_20_mpg
# With dplyr and piping:
two_wheel_20_mpg <- vehicles %>%
filter(drive == "2-Wheel Drive") %>%
filter(cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst (i.e. smallest) hwy mpg?
#   Hint: filter for the worst vehicle, then select its ID.
worst_hwy <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
worst_hwy
filter(two_wheel_20_mpg, hwy == min(hwy))
# With dplyr and piping:
worst_hwy <- two_wheel_20_mpg %>%
filter(hwy == min(hwy)) %>%
select(id)
worst_hwy
# With dplyr:
filtered <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_hwy <- select(filtered, id)
worst_hwy
vehicles
year_choice = 1997
vehicles[year_choice]
year_choice = "1997"
vehicles[year_choice]
year_choice = "1997"
vehicles$year == year_choice
vehicles[vehicles$year == year_choice,]
make_choice = "Acura"
vehicles[vehicles$make == make_choice]
make_choice = "Acura"
make_choice
vehicles$make == make_choice
vehicles[vehicles$make == make_choice,]
make_choice = "Acura"
vehicles_make_choice <- vehicles[vehicles$make == make_choice,]
vehicles_make_choice
vehicles_make_choice[vehicles_make_choice$year == year_choice,] # filters for vehicles from 1997
vehicles_make_year_choice <- vehicles_make_choice[vehicles_make_choice$year == year_choice,] # filters for vehicles from 1997
vehicles_make_year_choice
vehicles_make_year_choice$model[vehicles_make_year_choice$hwy == min(vehicles_make_year_choice$hwy)]
make_year_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), "model"]
}
make_choice = "Acura"
vehicles_make_choice <- vehicles[vehicles$make == make_choice,]
year_choice = "1997"
vehicles_make_year_choice <- vehicles_make_choice[vehicles_make_choice$year == year_choice,] # filters for vehicles from 1997
vehicles_make_year_choice$model[vehicles_make_year_choice$hwy == max(vehicles_make_year_choice$hwy)]
make_year_filter("Acura", "1997")
# With dplyr:
make_year_filter1 <- function(make_choice, year_choice) {
filtered <- filter(vehicles,
make = make_choice,
year = year_choice,
hwy = max(hwy))
select(filtered, model)
}
make_year_filter1("Acura", 1997)
# With dplyr:
make_year_filter1 <- function(make_choice, year_choice) {
filtered <- filter(vehicles,
make == make_choice,
year == year_choice,
hwy == max(hwy))
select(filtered, model)
}
make_year_filter1("Acura", 1997)
make_choice
year_choice
filter(vehicles,
make == make_choice,
year == year_choice,
hwy == max(hwy))
filter(vehicles,
make == make_choice,
year == year_choice)
# With dplyr:
make_year_filter1 <- function(make_choice, year_choice) {
filtered <- filter(vehicles,
make == make_choice,
year == year_choice)
filtered <- filter(filtered, hwy == max(hwy))
select(filtered, model)
}
make_year_filter1("Acura", 1997)
# With dplyr and piping:
make_year_filter2 <- function(make_choice, year_choice) {
vehicles %>%
filter(make == make_choice,
year == year_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
make_year_filter2("Acura", 1997)
# What was the most efficient Honda model of 1995?
make_year_filter("Honda", 1995)
# What was the most efficient Honda model of 1995?
make_year_filter("Honda", 1995)
make_year_filter1("Honda", 1995)
make_year_filter2("Honda", 1995)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
?flights
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
flights
flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, gain_in_air = arr_delay - dep_delay)
flights
mutate(flights, gain_in_air = arr_delay - dep_delay)
print(flights, width = inf)
print(flights, width = Inf)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Save it as a variable (or in the same one!)
flights <- arrange(flights, desc(gain_in_air))
View(head(flights))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gain_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air, na.rm = TRUE) # Gained 5 minutes!
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$gain_in_air, na.rm = FALSE) # Gained 5 minutes!
# On average, did flights to SeaTac gain or loose time?
mean(to_sea$gain_in_air, na.rm = TRUE) # Gained 11 minutes!
flights
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: Try to use pipes so that you can answer this question in one statement!
flights %>% filter(origin == "JFK",
dest == "SEA")
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: Try to use pipes so that you can answer this question in one statement!
flights %>%
filter(origin == "JFK",
dest == "SEA") %>%
group_by(air_time) %>%
summarize(avg_air_time = mean(air_time),
min_air_time = min(air_time),
max_air_time = max(air_time))
filter(flights, origin == "JFK", dest == "SEA") %>%
summarize(
avg_air_time = mean(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: Try to use pipes so that you can answer this question in one statement!
flights %>%
filter(origin == "JFK",
dest == "SEA") %>%
summarize(avg_air_time = mean(air_time),
min_air_time = min(air_time),
max_air_time = max(air_time))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: Try to use pipes so that you can answer this question in one statement!
flights %>%
filter(origin == "JFK",
dest == "SEA") %>%
summarize(avg_air_time = mean(air_time, na.rm = TRUE),
min_air_time = min(air_time, na.rm = TRUE),
max_air_time = max(air_time, na.rm = TRUE))
flights
ggplot(flights) +
geom_hist(x = gain_in_air)
library(ggplot2)
# histogram with ggplot2:
library(ggplot2)
ggplot(flights) +
geom_hist(x = gain_in_air)
ggplot(flights) +
geom_historgram(x = gain_in_air)
geom_histogram(mapping = aes(x = gain_in_air)
ggplot(flights) +
geom_histogram(mapping = aes(x = gain_in_air))
# histogram with ggplot2:
library(ggplot2)
# histogram with base R:
hist(flights$gain_in_air)
ggplot(flights) +
geom_bar(mapping = aes(x = gain_in_air))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
#   Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean(dep_delay, na.rm = TRUE))
print(dep_delay_by_month)
# Which month had the greatest average departure delay?
filter(dep_delay_by_month, delay == max(delay)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
ggplot(dep_delay_by_month) + geom_point()
dep_delay_by_month
ggplot(dep_delay_by_month) +
geom_point(mapping = aes(x = month, y = delay))
airports
# The package nycflights13 also includes a data frame called "airports".
# You can look up the above destinations in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1]) # for example
# To which destinations were the average arrival delays the highest?
#     Hint: you'll have to perform a grouping operation then summarize your data.
#           You can use the `head()` function to view just the first few rows for checking.
arr_delay_by_month <- flights %>%
group_by(dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
head(arr_delay_by_month)
airports
arr_delay_by_month
arr_delay_by_month$dest[1]
# The package nycflights13 also includes a data frame called "airports".
# You can look up the above destinations in the `airports` data frame!
filter(airports, faa == arr_delay_by_month$dest[1]) # for example
arr_delay_by_month$dest[1]
# Install the `"nycflights13"` package if necessary. Load the package.
# You'll also need to load `dplyr`.
# install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))
avg_delay <- flights %>%
group_by(dest) %>%    # creates it a tibble that groups rows by destination
summarise(avg_delay = mean(arr_delay, na.rm = TRUE))  # calculates the mean arrival delay per group
mutate(avg_delay, faa = dest)
avg_delay
largest_arrival_delay <- avg_delay %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa")
largest_arrival_delay
avg_delay_dest <- avg_delay %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa")
avg_delay_dest
# Which airport had the largest average arrival delay?
largest_arrival_delay <- avg_delay_dest %>%
filter(avg_delay == max(avg_delay)) %>%
select(dest)
largest_arrival_delay
# Which airport had the largest average arrival delay?
largest_arrival_delay <- avg_delay_dest %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE)) %>%
select(dest)
largest_arrival_delay
flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
# Which airport had the largest average arrival delay?
largest_arrival_delay <- avg_delay_dest %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
largest_arrival_delay
# Which airport had the largest average arrival delay?
largest_arrival_delay <- avg_delay_dest %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
print(largest_arrival_delay)
# Notice that we could have done all the above in one single statement using pipes:
largest_arrival_delay <- flights %>%
group_by(dest) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = "faa") %>%
filter(avg_delay == max(avg_delay, na.rm = TRUE))
print(largest_arrival_delay)
